
#===================
#=== Input Booleans
#===================
input_boolean:
  irrigation_notify_user1:
    name: Notify User1 of events
    icon: mdi:message-text-outline

  irrigation_notify_user2:
    name: Notify User2 of events
    icon: mdi:message-text-outline


#================
#=== Automations
#================
automation:

  #===================================================
  #=== Notify about irrigation events when on holiday
  #===================================================
  - alias: Irrigation Notify About Irrigation Events When On Holiday
    trigger:
      - platform: state
        entity_id:
        - input_boolean.irrigation_cycle1_running
        - input_boolean.irrigation_cycle2_running

    condition:
      - condition: state
        entity_id: binary_sensor.holiday_mode
        state: 'on'
    
      - condition: or
        conditions:
          - condition: state
            entity_id: input_boolean.irrigation_notify_user1
            state: 'on'
          - condition: state
            entity_id: input_boolean.irrigation_notify_user2
            state: 'on'         

    action:
      - service_template: >
          {% if trigger.to_state.state == 'on' %}
            script.irrigation_notify_irrigation_start
          {% else %}
            script.irriagtion_notify_irrigation_end
          {% endif %}
        data_template:
          cycle: >
            {% if trigger.entity_id == 'input_boolean.cycle1_running' %}
              cycle1
            {% else %}
              cycle2
            {% endif %}
        
          
#============
#=== Scripts
#============
script:

  #===============================
  #=== Notify when a cycle starts
  #===   Called with
  #===    [cycle1, cycle2] 
  #===============================
  irrigation_notify_irrigation_start:    
    sequence:
      - wait_template: >
          {{ is_state('script.notify', 'off') }}

      - service: script.notify
        data_template:
          tell: >
            {% set user1 = states('input_text.notifications_user1_name') %}
            {% set user2 = states('input_text.notifications_user2_name') %}
            {% if is_state('input_boolean.irrigation_notify_user1', 'on') and
                  is_state('input_boolean.irrigation_notify_user2', 'on') %}
              {{ (user1 | lower) ~ '_and_' ~ (user2 | lower) }}
            {% elif is_state('input_boolean.irrigation_notify_user1', 'on') %}
              {{ (user1 | lower ) }}
            {% else %}
              {{ (user2 | lower) }}
            {% endif %}
          message: >
            {% set cycle_name = states('input_text.irrigation_' ~ cycle ~ '_name') %}

            {% set ns = namespace(total_time = 0) %}
            {% for zone in states.input_number if zone.entity_id.startswith('input_number.irrigation_' ~ cycle ~ '_zone') and
                                                  zone.entity_id.endswith('_duration') %}
              {% if is_state('input_boolean.irrigation_' ~ cycle ~ '_zone' ~ loop.index ~ '_skip', 'off') %}                                   
                {% if is_state('input_boolean.irrigation_' ~ cycle ~ '_adjust_for_weather', 'off') %}
                  {% set ns.total_time = ns.total_time + states(zone.entity_id) | float %}
                {% else %}

                  {# Adjust for rainfall #}
                  {% if is_state('input_boolean.irrigation_' ~ cycle ~ '_adjust_for_rainfall', 'on') %}
                    {% set ns.total_time = ns.total_time * states('input_number.irrigation_rainfall_multiplier') | float %}
                  {% endif %}

                  {# Adjust for temperature #}
                  {% if is_state('input_boolean.irrigation_' ~ cycle ~ '_adjust_for_temperature', 'on') %}
                    {% set ns.total_time = ns.total_time * states('input_number.irrigation_temp_multiplier') | float %}
                  {% endif %}
            
                {% endif %}
              {% endif %}
            {% endfor %}
            I thought you'd like to know that the {{ cycle_name }} has just started.


            The total watering time should be about {{ (ns.total_time * 60) | timestamp_custom('%H:%M', false) }} but I'll let you know when it has finished.


            I hope you're having a lovely holiday!


  #=============================
  #=== Notify when a cycle ends
  #===   Called with
  #===    [cycle1, cycle2] 
  #=============================
  irrigation_notify_irrigation_end:    
    sequence:
      - wait_template: >
          {{ is_state('script.notify', 'off') }}

      - service: script.notify
        data_template:
          tell: >
            {% set user1 = states('input_text.notifications_user1_name') %}
            {% set user2 = states('input_text.notifications_user2_name') %}
            {% if is_state('input_boolean.irrigation_notify_user1', 'on') and
                  is_state('input_boolean.irrigation_notify_user2', 'on') %}
              {{ (user1 | lower) ~ '_and_' ~ (user2 | lower) }}
            {% elif is_state('input_boolean.irrigation_notify_user2', 'on') %}
              {{ (user2 | lower ) }}
            {% else %}
              {{ (user1 | lower) }}
            {% endif %}
          message: >
            {% set cycle_name = states('input_text.irrigation_' ~ cycle ~ '_name') %}

            All the {{ cycle_name }} watering is done.
