
#============
#=== Scripts
#============
script:
  
  #====================================
  #=== Stop Irrigation
  #===
  #=== Passed [cycle1, cycle2, cycle3]
  #===        [zone1, zone2 ... zone8]
  #==================================== 
  irrigation_stop_irrigation:
    sequence:

      - service: input_boolean.turn_off
        data_template:
          entity_id: >
            input_boolean.irrigation_{{ cycle }}_running

      #=== Turn off script (because it has a delay)
      - service: script.turn_off
        entity_id: script.irrigation_start_zone

      #=== Turn off all zone valves explicitly 
      - service: switch.turn_off
        data_template:
          entity_id: > 
            {% for switch_name in states.input_text if 'switch_entity_id' in switch_name.entity_id -%}
              {{ states(switch_name.entity_id) }}
              {%- if not loop.last %}, {% endif %}
            {%- endfor %}

      #=== Update Status to Idle
      - service: input_text.set_value
        data:
          entity_id: input_text.irrigation_current_status
          value: SYSTEM IDLE

      #=== Update previous cycle name to show cycle cancelled
      - service: input_text.set_value
        data_template:
          entity_id: input_text.irrigation_previous_run_cycle_name
          value: >
            {{ states('input_text.irrigation_previous_run_cycle_name') ~ ' (Cancelled)' }}

      #=== Pause zone timer to get time elapsed
      - service: timer.pause
        data_template:
          entity_id: >
            timer.irrigation_{{ zone }}_timer

      #=== Update previous run time for this zone
      - service: input_text.set_value
        data_template:
          entity_id: >
            input_text.irrigation_{{ zone }}_previous_duration_in_seconds
          value: >
            {% set original_duration = states('sensor.irrigation_' ~ cycle ~ '_' ~ zone ~ '_actual_duration_in_seconds') | float %}
            {% set duration_remaining = state_attr('timer.irrigation_' ~ zone ~ '_timer', 'remaining') %}
            {% set duration_remaining_hrs = duration_remaining.split(':')[0] | float %}
            {% set duration_remaining_mins = duration_remaining.split(':')[1] | float %}
            {% set duration_remaining_secs = duration_remaining.split(':')[2] | float %}
            {% set duration_remaining_secs = duration_remaining_secs + (duration_remaining_mins * 60) + (duration_remaining_hrs * 3600) %}
            {{ (original_duration - duration_remaining_secs) | string }}

      #=== Update previous total watering time
      - service: input_text.set_value
        data_template:
          entity_id: input_text.irrigation_previous_total_watering_time
          value: >
            {% set original_duration = states('sensor.irrigation_' ~ cycle ~ '_' ~ zone ~ '_actual_duration_in_seconds') | float %}
            {% set current_total = states('input_text.irrigation_previous_total_watering_time') | float %}
            {% set duration_remaining = state_attr('timer.irrigation_' ~ zone ~ '_timer', 'remaining') %}
            {% set duration_remaining_hrs = duration_remaining.split(':')[0] | float %}
            {% set duration_remaining_mins = duration_remaining.split(':')[1] | float %}
            {% set duration_remaining_secs = duration_remaining.split(':')[2] | float %}
            {% set duration_remaining_secs = duration_remaining_secs + (duration_remaining_mins * 60) + (duration_remaining_hrs * 3600) %}
            {{ (current_total + original_duration - duration_remaining_secs) | string }}

      #=== Cancel zone timer
      - service: timer.cancel
        data_template:
          entity_id: >
            timer.irrigation_{{ zone }}_timer


