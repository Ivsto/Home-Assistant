
#============
#=== Scripts
#============
script:

  #======================================================================
  #=== Setup Announcement Parameters
  #===
  #=== Optionally called with:
  #===    room (this MUST be a LIST of rooms, even if there is only one)
  #===          e.g.   - kitchen
  #===                 - dining_room
  #===    volume
  #===    quiet_time_volume
  #===    voice
  #===    priority
  #===    pause (no. of secs. to pause before announcement)
  #===    last_message
  #===
  #=== All parameters default to settings in the UI.
  #======================================================================
  setup_announcement_parameters:
    sequence:

    #=== Test mode allows scripts to be run using settings from the UI
    #=== So if in test mode don't continue
    - condition: state
      entity_id: input_boolean.announcement_test_mode
      state: 'off'


    #=== If this script is passed rooms then first we set all rooms
    #=== To OFF before turning ON those that have been passed in.
    #=== 
    #=== If this script has not been passed any rooms then we set
    #=== all rooms as appropriate based on th UI

    #=== Set Media Players to 'not in use' as appropriate
    - service: input_boolean.turn_off
      data_template:
        entity_id: >
          {%- macro get_rooms_from_ui() %}
          {%- for room in states.input_boolean 
                if 'announcement_on_' in room.entity_id and
                    is_state(room.entity_id, 'off') %}
              {{- room.entity_id.split('.')[-1].replace('announcement_on_','').replace('_media_player','') }}{{- '' if loop.last else ',' }}
          {%- endfor %}
          {%- endmacro %}

          {#=== If passed rooms then set all rooms to 'not in use' ===#}
          {% if room | length != 0 %}
            {% for boolean in states.input_boolean if 'announcement_on_' in boolean.entity_id -%}
              {% set room = boolean.entity_id.split('.')[1].split('announcement_on_')[1] -%}
              input_boolean.announcement_on_{{ room }}{%- if not loop.last %}, {% endif %}
            {%- endfor %}

          {#=== Else no rooms are passed so set unused rooms based on UI ===#}
          {% else %}
            {% set rooms_from_ui = get_rooms_from_ui().split(',') %}          
            {%- for x in rooms_from_ui -%}
              input_boolean.announcement_on_{{ x }}_media_player{%- if not loop.last %},
              {%- endif %}
            {%- endfor -%}
          {% endif %}
          
    #=== Set Media Players to 'in use' as appropriate
    - service: input_boolean.turn_on
      data_template:
        entity_id: >
          {%- macro get_rooms_from_ui() %}
          {%- for room in states.input_boolean 
                if 'announcement_on_' in room.entity_id and
                    is_state(room.entity_id, 'on') %}
              {{- room.entity_id.split('.')[-1].replace('announcement_on_','').replace('_media_player','') }}{{- '' if loop.last else ',' }}
          {%- endfor %}
          {%- endmacro %}

          {#=== If passed rooms then set all rooms to 'in use' as appropriate ===#}
          {% if room | length != 0 %}
            {%- for x in room -%}
              input_boolean.announcement_on_{{ x }}_media_player{%- if not loop.last %},
              {%- endif %}
            {%- endfor -%}

          {#=== Else no rooms are passed so set used rooms based on UI ===#}
          {% else %}
            {% set rooms_from_ui = get_rooms_from_ui().split(',') %}          
            {%- for x in rooms_from_ui -%}
              input_boolean.announcement_on_{{ x }}_media_player{%- if not loop.last %},
              {%- endif %}
            {%- endfor -%}
          {% endif %}


    #=== Set group master
    - service: input_select.select_option
      data_template:
        entity_id: input_select.sonos_group_master
        option: >
          {%- macro get_rooms_from_ui() %}
          {%- for room in states.input_boolean 
                if 'announcement_on_' in room.entity_id and
                    is_state(room.entity_id, 'on') %}
              {{- room.entity_id.split('.')[-1].replace('announcement_on_','').replace('_media_player','') }}{{- '' if loop.last else ',' }}
          {%- endfor %}
          {%- endmacro %}

          {% set rooms_from_ui = get_rooms_from_ui().split(',') %}          
          {{ (room | default(rooms_from_ui))[0].replace('_', ' ') | title }}

    #=== Set volume
    - service: input_number.set_value
      data_template:
        entity_id: input_number.announcement_volume
        value: >
          {{ volume | default(states('input_number.announcement_volume')) }}

    #=== Set quiet time volume
    - service: input_number.set_value
      data_template:
        entity_id: input_number.quiet_time_volume
        value: >
          {{ volume | default(states('input_number.announcement_quiet_time_volume')) }}

    #=== Set voice
    - service: input_select.select_option
      data_template:
        entity_id: input_select.announcement_voice
        option: >
          {{ voice | default(states('input_select.announcement_voice')) }}

    #=== Set priority
    - service_template: >
        {% if (priority | default(states('input_boolean.announcement_priority')) | lower) == 'on' %}
          input_boolean.turn_on
        {% else %}
          input_boolean.turn_off
        {% endif %}
      entity_id: input_boolean.announcement_priority

    #=== Set Pause
    - service: input_number.set_value
      data_template:
        entity_id: input_number.announcement_pause
        value: >
          {{ pause | default(states('input_number.announcement_pause')) }}

    #=== Set last_announcement
    - service_template: >
        {% if (last_message | default(states('input_boolean.announcement_last')) | lower) == 'on' %}
          input_boolean.turn_on
        {% else %}
          input_boolean.turn_off
        {% endif %}
      entity_id: input_boolean.announcement_last

    #=== Set the last announcement identity
    - service: input_text.set_value
      data_template:
        entity_id: input_text.last_announcement_id
        value: "[SETUP] {{ states('input_text.announcement_id_in_progress') }}"

    #=== This is here to ensure it gets updated to help with debugging
    - wait_template: >
        {{ states('input_text.last_announcement_id').startswith('[SETUP]') }}

